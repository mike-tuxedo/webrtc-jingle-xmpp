{
  "name": "tav",
  "description": "Brain-free command-line options parser for node.js",
  "version": "0.1.0",
  "main": "./index",
  "author": {
    "name": "Alexander Dorofeev"
  },
  "maintainers": [
    {
      "name": "Alexander Dorofeev",
      "email": "aka.spin@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/akaspin/tav.git"
  },
  "bugs": {
    "url": "http://github.com/akaspin/tav/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/akaspin/tav/blob/master/LICENSE"
    }
  ],
  "readme": "# tav*\r\n\r\nCommand-line options parser for [node.js](http://nodejs.org/).\r\n\r\n*In the Phoenician alphabet letter \"tav\" indicates mark or sign.\r\n\r\n## Installation\r\n\r\nYou can install *tav* as usual - by copy \"tav\" directory in your \r\n`~/.node_libraries` or via *npm*\r\n\r\n    npm install tav\r\n\r\n## Usage\r\n\r\n*tav* was written for brain-free usage. All you need - import it and run a \r\nsingle function `set` at least once. \r\n\r\n    var opts = require('tav').set();\r\n    console.log(opts, opts.args);\r\n\r\nAfter that, all command-options will be available as regular `Object`. And all \r\narguments - as a regular `Array`. :\r\n    \r\n    $node app.js --host=localhost --port=8080 --debug arg1 arg2\r\n    { host: 'localhost', port: 8080, debug: true } [ 'arg1', 'arg2' ]\r\n    \r\nNote, that `.args` not enumerable.\r\n\r\nAll the options and arguments are separated by spaces. Order of options and \r\narguments is not important. Options should be set in \"full\" notation in \r\nfollowing form:\r\n\r\n    --option_name[=option_value] \r\n\r\nOption names can't contain spaces and be called `set` . Values are processed \r\nby the following rules:\r\n\r\n* If value represents any number, it be evaluated as `Number`\r\n* Otherwise value will be a `String`. `String` values can contain \r\n  equal sign(`=`). \r\n* If option value contains spaces, you will need to enclose it in single (`'`) \r\n  or double quotes (`\"`).\r\n* Options without values assumes as `Boolean` `true`.\r\n\r\nSome examples:\r\n\r\n    --simple_string=simple\r\n    --string_with_spaces='String with spaces'\r\n    --simple_number=345\r\n    --decimal_number=755.235\r\n    --bool_true\r\n\r\nAll arguments fall into the `Array` `whatever-it-is-imported.args` in the order \r\nwhich they were at the command line.\r\n\r\nAlso there is a special option `--help`. But we will consider it in the next \r\nsection.\r\n\r\n## Options specifications and banners\r\n\r\nNaturally, you can describe the options. To do this, simply some specifications\r\nto `set` function. Also you can set *banner*.\r\n\r\n    var opts = require('tav').set({\r\n        host: {\r\n            note: 'Hostname'\r\n        },\r\n        port: {\r\n            note: 'Binding port',\r\n            value: 80\r\n        },\r\n        debug : {\r\n            note : 'Debug this',\r\n            value : false\r\n        }\r\n    }, \"Very cool app\");\r\n    console.log(opts);\r\n\r\nIf you omit the option \"port\", it will be set by default value:\r\n\r\n    $node app.js --host=localhost --debug arg1 arg2\r\n    { host: 'localhost', port: 80, debug: true } [ 'arg1', 'arg2' ]\r\n\r\nBut still, how about the option `--help`? Let's do it.\r\n\r\n    $node app.js --host=localhost --debug arg1 arg2 --help\r\n    Very cool app\r\n\r\n    Hostname\r\n        --host *required\r\n    Binding port\r\n        --port\r\n    Debug this\r\n        --debug\r\n    Help. This message.\r\n        --help\r\n\r\n`--help` option prints usage instructions and terminates program with normal\r\nexit code (0).\r\n\r\n## Required options\r\n\r\nYou probably noticed that `--host` option marked as `*required` in usage \r\ninstructions . And if we run \"Very cool app\" without this option, you will get \r\nthis such a bomb...\r\n\r\n    $node app.js --debug arg1 arg2\r\n    Very cool app\r\n    \r\n    Required but not provided:\r\n        --host\r\n    \r\n    Run with --help for more info\r\n\r\nOption is considered as `required` if specifications do not specify its \r\ndefault value. If required option not provided, `set` prints info about absent \r\noptions and terminates program with error.\r\n\r\n## Unexpected options\r\n\r\nWhile our program is guzzled all that it will. Let's try a little bit to \r\nstraighten it. This requires only small changes:\r\n\r\n    var opts = require('../tav').set({\r\n        host : {\r\n            note : 'Hostname'\r\n        },\r\n        port : {\r\n            note : 'Binding port',\r\n            value : 80\r\n        }                           // Remove \"debug\" from specifications\r\n    }, \"Very cool app\",\r\n    true);                          // And set \"true\" after banner\r\n    console.log(opts);\r\n\r\nLast parameter causes `set` to generate an error if in command line appears\r\noption that not described in the specifications. Let's crash...\r\n\r\n    $node app.js --host=localhost --debug arg1 arg2\r\n    Very cool app\r\n    \r\n    Unexpected options:\r\n        --debug\r\n    \r\n    Run with --help for more info\r\n    \r\n... and once more...\r\n\r\n    $node app.js --debug arg1 arg2\r\n    Very cool app\r\n    \r\n    Required but not provided:\r\n        --host\r\n    Unexpected options:\r\n        --debug\r\n    \r\n    Run with --help for more info\r\n\r\n## Globalization\r\n\r\n`tav` stores all options and arguments on first call of `set` function. After\r\nthat all of them will be available from other modules without having to call\r\n`set` as regular object. Let's try.\r\n\r\nOur tortured *app.js*:\r\n\r\n    var opts = require('tav').set({\r\n        host: {\r\n            note: 'Hostname'\r\n        },\r\n        port: {\r\n            note: 'Binding port',\r\n            value: 80\r\n        },\r\n        debug : {\r\n            note : 'Debug this',\r\n            value : false\r\n        }\r\n    }, \"Very cool app\");\r\n    var nested = require('./nested');\r\n    console.log(nested.report());\r\n\r\nAnd *nested.js*:\r\n\r\n    var opts = require('tav');\r\n    exports.report = function() {\r\n        return opts;\r\n    };\r\n\r\nRun it:\r\n\r\n    $node app.js --host=localhost arg1 arg2\r\n    { port: 80, debug: false, host: 'localhost' }\r\n    \r\n... All good. All in place.\r\n    \r\n    ",
  "readmeFilename": "readme.md",
  "_id": "tav@0.1.0",
  "_from": "tav"
}
