{
  "name": "node-lumberjack",
  "version": "0.0.4",
  "main": "./index.js",
  "description": "A very simple logging library for node.js",
  "author": {
    "name": "Dhruv Matani"
  },
  "dependencies": {
    "underscore": "= 1.1.5"
  },
  "repositories": [
    {
      "type": "git",
      "path": "git://github.com/dhruvbird/node-lumberjack.git"
    }
  ],
  "homepage": "https://github.com/dhruvbird/node-lumberjack",
  "bugs": "https://github.com/dhruvbird/node-lumberjack/issues",
  "maintainers": [
    {
      "name": "Dhruv Matani",
      "email": "dhruvbird@gmail.com",
      "url": "http://dhruvbird.com/"
    }
  ],
  "contributors": [],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engines": {
    "node": ">=0.4.1"
  },
  "readme": "# node-lumberjack\n\nA very simple logging library for node.js\n\n## Features\n\n* Supports the **%s** format string - use it for every argument. If the parameter is not a string, it is converted to one using String(object)\n\n* Prints:\n   * Timestamp\n   * Log Statement Severity\n   * Module Name\n   * Constructor name\n   * Function name\n   * Line number\n\n* A logger object (returned by getLogger) supports the following methods:\n   * trace\n   * debug\n   * info\n   * warn\n   * error\n   * fatal\n   * getLevel(): Returns the currently set log level\n   * setLevel(levelString): Sets the current log level\n\n* *trace* is the most verbose log level and *fatal* is the least. If \n  you set the log level to *info*, then all log statements between \n  levels *fatal* and *info* (both inclusive) will be logged.\n\n## Example usage\n\n```javascript\nvar path     = require('path');\nvar filename = path.basename(path.normalize(__filename))\nvar log      = require('node-lumberjack').getLogger(filename, 'trace');\n\nlog.info(\"Line 1\");\nlog.warn(\"Line %s\", 2);\n```\n\nSee the file [test.js](https://github.com/dhruvbird/node-lumberjack/blob/master/test.js) for a complete example on how to use this library.\n\n## Example output\n\n```\n[2012-06-10 12:14:23.350] [INFO] [test.js:test:7] - Line 1\n[2012-06-10 12:14:23.359] [WARN] [test.js:test:8] - Line 2\n[2012-06-10 12:14:23.359] [DEBUG] [test.js:test:9] - 3rd line\n[2012-06-10 12:14:23.360] [ERROR] [test.js:test:10] - 4th Line comes here\n[2012-06-10 12:14:23.360] [TRACE] [test.js:test:11] - Tracing on the 5th line\n```\n\nnode-lumberjack prints the module name, constructor name, function name and the line number on which the logging function was called. Here is an example:\n\n```\n[2012-06-10 12:14:23.362] [TRACE] [test.js:CtorName.functionName:20] - You should see the object & function name on this line\n```\n",
  "readmeFilename": "README.md",
  "_id": "node-lumberjack@0.0.4",
  "_from": "node-lumberjack"
}
